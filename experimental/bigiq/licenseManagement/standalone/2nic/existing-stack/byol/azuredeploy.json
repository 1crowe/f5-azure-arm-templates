{
    "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json", 
    "contentVersion": "5.3.0.0", 
    "parameters": {
        "adminUsername": {
            "defaultValue": "azureuser", 
            "metadata": {
                "description": "User name for the Virtual Machine."
            }, 
            "type": "string"
        }, 
        "authenticationType": {
            "allowedValues": [
                "password", 
                "sshPublicKey"
            ], 
            "defaultValue": "password", 
            "metadata": {
                "description": "Type of authentication to use on the Virtual Machine, password based authentication or key based authentication."
            }, 
            "type": "string"
        }, 
        "adminPasswordOrKey": {
            "metadata": {
                "description": "Password or SSH public key to login to the Virtual Machine. Note: There are a number of special characters that you should avoid using for F5 product user accounts.  See [K2873](https://support.f5.com/csp/article/K2873) for details. Note: If using key-based authentication, this should be the public key as a string, typically starting with **---- BEGIN SSH2 PUBLIC KEY ----** and ending with **---- END SSH2 PUBLIC KEY ----**."
            }, 
            "type": "securestring"
        }, 
        "dnsLabel": {
            "defaultValue": "", 
            "metadata": {
                "description": "Unique DNS Name for the Public IP address used to access the Virtual Machine."
            }, 
            "type": "string"
        }, 
        "instanceName": {
            "defaultValue": "f5vm01", 
            "metadata": {
                "description": "Name of the Virtual Machine."
            }, 
            "type": "string"
        }, 
        "instanceType": {
            "allowedValues": [
                "Standard_D4s_v3", 
                "Standard_D2s_v3", 
                "Standard_D8s_v3"
            ], 
            "defaultValue": "Standard_DS2_v2", 
            "metadata": {
                "description": "Instance size of the Virtual Machine."
            }, 
            "type": "string"
        }, 
        "bigIqVersion": {
            "allowedValues": [ 
                "6.0.0001674",
                "6.0.100813"
            ], 
            "defaultValue": "6.0.100813", 
            "metadata": {
                "description": "F5 BIG-IQ version you want to use."
            }, 
            "type": "string"
        }, 
        "bigIqLicenseKey1": {
            "defaultValue": "", 
            "metadata": {
                "description": "F5 BYOL BIG-IQ License Manager registration key."
            },
            "maxLength": 255,
            "minLength": 1, 
            "type": "string"
        },
        "licensePoolKeys": {
            "defaultValue": "Do_Not_Create",
            "metadata": {
                "description": "Enter a pool name and registration key using the format of name:key. Leave Do_Not_Create if you do not want to create a licensing pool on BIG-IQ at this time."
            },
            "maxLength": 255,
            "minLength": 1, 
            "type": "string"
        },
        "regPoolKeys": {
            "defaultValue": "Do_Not_Create",
            "metadata": {
                "description": "Enter a pool name and a list of individual BIG-IP registration keys in the format of name:key,key,key. Leave Do_Not_Create if you do not want to create a reg key pool on BIG-IQ at this time."
            },
            "maxLength": 255,
            "minLength": 1, 
            "type": "string"
        },
        "numberOfInternalIps": {
            "allowedValues": [
                0,
                1
            ], 
            "defaultValue": 1, 
            "metadata": {
                "description": "The number of public/private IP addresses you want to deploy for the application traffic (internal) NIC on the BIG-IQ VE to be used for virtual servers."
            }, 
            "type": "int"
        }, 
        "vnetName": {
            "metadata": {
                "description": "The name of the existing virtual network to which you want to connect the BIG-IQ VEs."
            }, 
            "type": "string"
        }, 
        "vnetResourceGroupName": {
            "metadata": {
                "description": "The name of the resource group that contains the Virtual Network where the BIG-IQ VE will be placed."
            }, 
            "type": "string"
        }, 
        "mgmtSubnetName": {
            "metadata": {
                "description": "Name of the existing mgmt subnet - with external access to the Internet. **Important**: The subnet you provide for the mgmt NIC **must** be unique."
            }, 
            "type": "string"
        }, 
        "mgmtIpAddress": {
            "metadata": {
                "description": "MGMT subnet IP Address to use for the BIG-IQ management IP address."
            }, 
            "type": "string"
        }, 
        "internalSubnetName": {
            "metadata": {
                "description": "Name of the existing internal subnet. **Important**: The subnet you provide for the internal NIC **must** be unique."
            }, 
            "type": "string"
        }, 
        "internalIpAddressRangeStart": {
            "metadata": {
                "description": "The static private IP address want to assign to the first internal Azure public IP (for self IP). An additional private IP address will be assigned for each public IP address you specified in **numberOfInternalIps**.  For example, entering 10.100.1.50 here and choosing 2 in numberOfInternalIps would result in 10.100.1.50 (self IP), 10.100.1.51 and 10.100.1.52 being configured as static private IP addresses for internal virtual servers."
            }, 
            "type": "string"
        }, 
        "avSetChoice": {
            "defaultValue": "CREATE_NEW", 
            "metadata": {
                "description": "If you want the VM placed in a new Azure Availability Set, leave the default value of **CREATE_NEW**, otherwise specify the name of the existing Availability Set you want to use. Note: If you are using an existing AV Set, this deployment must be in the same Azure Resource Group as the AV Set."
            }, 
            "type": "string"
        }, 
        "ntpServer": {
            "defaultValue": "0.pool.ntp.org", 
            "metadata": {
                "description": "Leave the default NTP server the BIG-IQ uses, or replace the default NTP server with the one you want to use."
            }, 
            "type": "string"
        }, 
        "timeZone": {
            "defaultValue": "UTC", 
            "metadata": {
                "description": "If you would like to change the time zone the BIG-IQ uses, enter the time zone you want to use. This is based on the tz database found in /usr/share/zoneinfo (see the full list [here](https://github.com/F5Networks/f5-azure-arm-templates/blob/master/azure-timezone-list.md)). Example values: UTC, US/Pacific, US/Eastern, Europe/London or Asia/Singapore."
            }, 
            "type": "string"
        }, 
        "customImage": {
            "defaultValue": "OPTIONAL", 
            "metadata": {
                "description": "If you would like to deploy using a local BIG-IQ image, provide either the full URL to the VHD in Azure storage **or** the full resource ID to an existing Microsoft.Compute image resource.  **Note**: Unless specifically required, leave the default of **OPTIONAL**."
            }, 
            "type": "string"
        }, 
        "restrictedSrcAddress": {
            "defaultValue": "*", 
            "metadata": {
                "description": "Source Address(es) for Management Access. The IP address range used to SSH and access management GUI on the BIG-IQ."
            }, 
            "type": "string"
        },
        "restrictedSrcAddressApp": {
            "defaultValue": "*", 
            "metadata": {
                "description": "Source Address(es) for internal Management Access. The IP address range that can be used to access BIG-IQ on the specified internal network via port 443."
            }, 
            "type": "string"
        }, 
        "tagValues": {
            "defaultValue": {
                "application": "APP", 
                "cost": "COST", 
                "environment": "ENV", 
                "group": "GROUP", 
                "owner": "OWNER"
            }, 
            "metadata": {
                "description": "Default key/value resource tags will be added to the resources in this deployment, if you would like the values to be unique adjust them as needed for each key."
            }, 
            "type": "object"
        }, 
        "allowUsageAnalytics": {
            "allowedValues": [
                "Yes", 
                "No"
            ], 
            "defaultValue": "Yes", 
            "metadata": {
                "description": "This deployment can send anonymous statistics to F5 to help us determine how to improve our solutions. If you select **No** statistics are not sent."
            }, 
            "type": "string"
        }
    }, 
    "variables": {
        "computeApiVersion": "2017-12-01", 
        "networkApiVersion": "2017-11-01", 
        "storageApiVersion": "2017-10-01", 
        "location": "[resourceGroup().location]", 
        "adminPasswordOrKey": "[replace(parameters('adminPasswordOrKey'),'\\n', '\n')]", 
        "linuxConfiguration": {
            "disablePasswordAuthentication": true, 
            "ssh": {
                "publicKeys": [
                    {
                        "keyData": "[variables('adminPasswordOrKey')]", 
                        "path": "[concat('/home/', parameters('adminUsername'), '/.ssh/authorized_keys')]"
                    }
                ]
            }
        }, 
        "subscriptionID": "[subscription().subscriptionId]", 
        "resourceGroupName": "[resourceGroup().name]", 
        "singleQuote": "'",
        "f5CloudLibsTag": "v4.4.0", 
        "f5CloudLibsAzureTag": "v2.4.0", 
        "dnsLabel": "[toLower(parameters('dnsLabel'))]", 
        "skuToUse": "f5-bigiq-virtual-edition-byol", 
        "offerToUse": "f5-big-iq", 
        "imagePlan": {
            "name": "[variables('skuToUse')]", 
            "product": "[variables('offerToUse')]", 
            "publisher": "f5-networks"
        }, 
        "imageReference": {
            "offer": "[variables('offerToUse')]", 
            "publisher": "f5-networks", 
            "sku": "[variables('skuToUse')]", 
            "version": "[parameters('bigIqVersion')]"
        }, 
        "instanceName": "[toLower(parameters('instanceName'))]", 
        "newAvailabilitySetName": "[concat(variables('dnsLabel'), '-avset')]", 
        "availabilitySetName": "[replace(parameters('avSetChoice'), 'CREATE_NEW', variables('newAvailabilitySetName'))]", 
        "virtualNetworkName": "[parameters('vnetName')]", 
        "vnetId": "[resourceId(parameters('vnetResourceGroupName'),'Microsoft.Network/virtualNetworks',variables('virtualNetworkName'))]", 
        "publicIPAddressType": "Static", 
        "mgmtPublicIPAddressName": "[concat(variables('dnsLabel'), '-mgmt-pip')]", 
        "mgmtPublicIPAddressId": "[resourceId('Microsoft.Network/publicIPAddresses', variables('mgmtPublicIPAddressName'))]", 
        "mgmtNsgID": "[resourceId('Microsoft.Network/networkSecurityGroups/',concat(variables('dnsLabel'),'-mgmt-nsg'))]", 
        "mgmtNicName": "[concat(variables('dnsLabel'), '-mgmt')]", 
        "mgmtSubnetName": "[parameters('mgmtSubnetName')]", 
        "mgmtSubnetId": "[concat(variables('vnetId'), '/subnets/', variables('mgmtSubnetName'))]", 
        "mgmtSubnetPrivateAddress": "[parameters('mgmtIpAddress')]", 
        "intNsgID": "[resourceId('Microsoft.Network/networkSecurityGroups/',concat(variables('dnsLabel'),'-int-nsg'))]", 
        "intNicName": "[concat(variables('dnsLabel'), '-int')]", 
        "intSubnetName": "[parameters('internalSubnetName')]", 
        "intSubnetId": "[concat(variables('vnetId'), '/subnets/', variables('intSubnetName'))]", 
        "intSubnetPrivateAddress": "[parameters('internalIpAddressRangeStart')]", 
        "intSubnetPrivateAddressPrefixArray": "[split(parameters('internalIpAddressRangeStart'), '.')]", 
        "intSubnetPrivateAddressPrefix": "[concat(variables('intSubnetPrivateAddressPrefixArray')[0], '.', variables('intSubnetPrivateAddressPrefixArray')[1], '.', variables('intSubnetPrivateAddressPrefixArray')[2], '.')]", 
        "intSubnetPrivateAddressSuffixInt": "[int(variables('intSubnetPrivateAddressPrefixArray')[3])]", 
        "numberOfInternalIps": "[parameters('numberOfInternalIps')]", 
        "tagValues": "[parameters('tagValues')]", 
        "newDataStorageAccountName": "[concat(uniqueString(variables('dnsLabel'), resourceGroup().id, deployment().name), 'data000')]", 
        "dataStorageAccountType": "Standard_LRS", 
        "deploymentId": "[concat(variables('subscriptionId'), resourceGroup().id, deployment().name, variables('dnsLabel'))]", 
        "customImage": "[replace(parameters('customImage'), 'OPTIONAL', '')]", 
        "useCustomImage": "[not(empty(variables('customImage')))]", 
        "createNewCustomImage": "[contains(variables('customImage'), 'https://')]", 
        "newCustomImageName": "[concat(variables('dnsLabel'), 'image')]", 
        "storageProfileArray": {
            "customImage": {
                "imageReference": {
                    "id": "[if(variables('createNewCustomImage'), resourceId('Microsoft.Compute/images', variables('newCustomImageName')), variables('customImage'))]"
                }
            }, 
            "platformImage": {
                "imageReference": "[variables('imageReference')]", 
                "osDisk": {
                    "createOption": "FromImage"
                }
            }
        }, 
        "premiumInstanceArray": [
            "Standard_DS2", 
            "Standard_DS3", 
            "Standard_DS4", 
            "Standard_DS11", 
            "Standard_DS12", 
            "Standard_DS13", 
            "Standard_DS14", 
            "Standard_DS2_v2", 
            "Standard_DS3_v2", 
            "Standard_DS4_v2", 
            "Standard_DS5_v2", 
            "Standard_DS11_v2", 
            "Standard_DS12_v2", 
            "Standard_DS13_v2", 
            "Standard_DS14_v2", 
            "Standard_DS15_v2", 
            "Standard_F2S", 
            "Standard_F4S", 
            "Standard_F8S", 
            "Standard_F16S", 
            "Standard_GS2", 
            "Standard_GS3", 
            "Standard_GS4", 
            "Standard_GS5"
        ],
        "initScript": "",
        "customConfig": "### START (INPUT) CUSTOM CONFIGURATION HERE\n", 
        "installCustomConfig": "[concat(variables('singleQuote'), '#!/bin/bash\n', variables('customConfig'), variables('singleQuote'))]"
    }, 
    "resources": [
        {
            "apiVersion": "[variables('networkApiVersion')]", 
            "location": "[variables('location')]", 
            "name": "[variables('mgmtPublicIPAddressName')]", 
            "properties": {
                "dnsSettings": {
                    "domainNameLabel": "[variables('dnsLabel')]"
                }, 
                "idleTimeoutInMinutes": 30, 
                "publicIPAllocationMethod": "[variables('publicIPAddressType')]"
            }, 
            "tags": "[if(empty(variables('tagValues')), json('null'), variables('tagValues'))]", 
            "type": "Microsoft.Network/publicIPAddresses"
        }, 
        {
            "apiVersion": "[variables('networkApiVersion')]", 
            "dependsOn": [
                "[variables('mgmtPublicIPAddressId')]", 
                "[variables('mgmtNsgID')]"
            ], 
            "location": "[variables('location')]", 
            "name": "[variables('mgmtNicName')]", 
            "properties": {
                "ipConfigurations": [
                    {
                        "name": "[concat(variables('instanceName'), '-ipconfig1')]", 
                        "properties": {
                            "PublicIpAddress": {
                                "Id": "[variables('mgmtPublicIPAddressId')]"
                            }, 
                            "privateIPAddress": "[variables('mgmtSubnetPrivateAddress')]", 
                            "privateIPAllocationMethod": "Static", 
                            "subnet": {
                                "id": "[variables('mgmtSubnetId')]"
                            }
                        }
                    }
                ], 
                "networkSecurityGroup": {
                    "id": "[variables('mgmtNsgID')]"
                }
            }, 
            "tags": "[if(empty(variables('tagValues')), json('null'), variables('tagValues'))]", 
            "type": "Microsoft.Network/networkInterfaces"
        }, 
        {
            "apiVersion": "[variables('networkApiVersion')]", 
            "dependsOn": [
                "[variables('intNsgID')]"
            ], 
            "location": "[variables('location')]", 
            "name": "[variables('intNicName')]", 
            "properties": {
                "copy": [
                    {
                        "count": "[add(variables('numberOfInternalIps'), 1)]", 
                        "input": {
                            "name": "[if(equals(copyIndex('ipConfigurations', 1), 1), concat(variables('instanceName'), '-self-ipconfig'), concat(variables('resourceGroupName'), '-int-ipconfig', sub(copyIndex('ipConfigurations', 1), 2)))]", 
                            "properties": {
                                "primary": "[if(equals(copyIndex('ipConfigurations', 1), 1), 'True', 'False')]", 
                                "privateIPAddress": "[if(equals(copyIndex('ipConfigurations', 1), 1), variables('intSubnetPrivateAddress'), concat(variables('intSubnetPrivateAddressPrefix'), add(variables('intSubnetPrivateAddressSuffixInt'), sub(copyIndex('ipConfigurations', 1), 1))))]", 
                                "privateIPAllocationMethod": "Static", 
                                "subnet": {
                                    "id": "[variables('intSubnetId')]"
                                }
                            }
                        }, 
                        "name": "ipConfigurations"
                    }
                ], 
                "networkSecurityGroup": {
                    "id": "[concat(variables('intNsgID'))]"
                }
            }, 
            "tags": "[if(empty(variables('tagValues')), json('null'), variables('tagValues'))]", 
            "type": "Microsoft.Network/networkInterfaces"
        }, 
        {
            "apiVersion": "[variables('networkApiVersion')]", 
            "location": "[variables('location')]", 
            "name": "[concat(variables('dnsLabel'), '-mgmt-nsg')]", 
            "properties": {
                "securityRules": [
                    {
                        "name": "mgmt_allow_https", 
                        "properties": {
                            "access": "Allow", 
                            "description": "", 
                            "destinationAddressPrefix": "*", 
                            "destinationPortRange": "443", 
                            "direction": "Inbound", 
                            "priority": 101, 
                            "protocol": "Tcp", 
                            "sourceAddressPrefix": "[parameters('restrictedSrcAddress')]", 
                            "sourcePortRange": "*"
                        }
                    }, 
                    {
                        "name": "allow_ssh_22", 
                        "properties": {
                            "access": "Allow", 
                            "description": "", 
                            "destinationAddressPrefix": "*", 
                            "destinationPortRange": "22", 
                            "direction": "Inbound", 
                            "priority": 102, 
                            "protocol": "Tcp", 
                            "sourceAddressPrefix": "[parameters('restrictedSrcAddress')]", 
                            "sourcePortRange": "*"
                        }
                    }
                ]
            }, 
            "tags": "[if(empty(variables('tagValues')), json('null'), variables('tagValues'))]", 
            "type": "Microsoft.Network/networkSecurityGroups"
        }, 
        {
            "apiVersion": "[variables('networkApiVersion')]", 
            "location": "[variables('location')]", 
            "name": "[concat(variables('dnsLabel'), '-int-nsg')]", 
            "properties": {
                "securityRules": [
                    {
                        "name": "int_allow_https", 
                        "properties": {
                            "access": "Allow", 
                            "description": "", 
                            "destinationAddressPrefix": "*", 
                            "destinationPortRange": "443", 
                            "direction": "Inbound", 
                            "priority": 101, 
                            "protocol": "Tcp", 
                            "sourceAddressPrefix": "[parameters('restrictedSrcAddressApp')]", 
                            "sourcePortRange": "*"
                        }
                    }, 
                    {
                        "name": "int_allow_ssh_22", 
                        "properties": {
                            "access": "Allow", 
                            "description": "", 
                            "destinationAddressPrefix": "*", 
                            "destinationPortRange": "22", 
                            "direction": "Inbound", 
                            "priority": 102, 
                            "protocol": "Tcp", 
                            "sourceAddressPrefix": "[parameters('restrictedSrcAddressApp')]", 
                            "sourcePortRange": "*"
                        }
                    }
                ]
            }, 
            "tags": "[if(empty(variables('tagValues')), json('null'), variables('tagValues'))]", 
            "type": "Microsoft.Network/networkSecurityGroups"
        }, 
        {
            "apiVersion": "[variables('computeApiVersion')]", 
            "condition": "[equals(toUpper(parameters('avSetChoice')), 'CREATE_NEW')]", 
            "location": "[variables('location')]", 
            "name": "[variables('availabilitySetName')]", 
            "properties": {
                "PlatformFaultDomainCount": 2, 
                "PlatformUpdateDomainCount": 2
            }, 
            "sku": {
                "name": "Aligned"
            }, 
            "tags": "[if(empty(variables('tagValues')), json('null'), variables('tagValues'))]", 
            "type": "Microsoft.Compute/availabilitySets"
        }, 
        {
            "apiVersion": "[variables('storageApiVersion')]", 
            "kind": "Storage", 
            "location": "[variables('location')]", 
            "name": "[variables('newDataStorageAccountName')]", 
            "properties": {
                "supportsHttpsTrafficOnly": true
            }, 
            "sku": {
                "name": "[variables('dataStorageAccountType')]", 
                "tier": "Standard"
            }, 
            "tags": "[if(empty(variables('tagValues')), json('null'), variables('tagValues'))]", 
            "type": "Microsoft.Storage/storageAccounts"
        }, 
        {
            "apiVersion": "[variables('computeApiVersion')]", 
            "condition": "[and(variables('useCustomImage'), variables('createNewCustomImage'))]", 
            "location": "[variables('location')]", 
            "name": "[variables('newCustomImageName')]", 
            "properties": {
                "storageProfile": {
                    "osDisk": {
                        "blobUri": "[variables('customImage')]", 
                        "osState": "Generalized", 
                        "osType": "Linux", 
                        "storageAccountType": "[if(contains(variables('premiumInstanceArray'), parameters('instanceType')), 'Premium_LRS', 'Standard_LRS')]"
                    }
                }
            }, 
            "tags": "[if(empty(variables('tagValues')), json('null'), variables('tagValues'))]", 
            "type": "Microsoft.Compute/images"
        }, 
        {
            "apiVersion": "[variables('computeApiVersion')]", 
            "dependsOn": [
                "[concat('Microsoft.Storage/storageAccounts/', variables('newDataStorageAccountName'))]", 
                "[concat('Microsoft.Compute/availabilitySets/', variables('availabilitySetName'))]", 
                "[variables('newCustomImageName')]", 
                "[concat('Microsoft.Network/networkInterfaces/', variables('mgmtNicName'))]", 
                "[concat('Microsoft.Network/networkInterfaces/', variables('intNicName'))]"
            ], 
            "location": "[variables('location')]", 
            "name": "[variables('instanceName')]", 
            "plan": "[if(variables('useCustomImage'), json('null'), variables('imagePlan'))]", 
            "properties": {
                "availabilitySet": {
                    "id": "[resourceId('Microsoft.Compute/availabilitySets',variables('availabilitySetName'))]"
                }, 
                "diagnosticsProfile": {
                    "bootDiagnostics": {
                        "enabled": true, 
                        "storageUri": "[reference(concat('Microsoft.Storage/storageAccounts/', variables('newDataStorageAccountName')), providers('Microsoft.Storage', 'storageAccounts').apiVersions[0]).primaryEndpoints.blob]"
                    }
                }, 
                "hardwareProfile": {
                    "vmSize": "[parameters('instanceType')]"
                }, 
                "networkProfile": {
                    "networkInterfaces": [
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('mgmtNicName'))]", 
                            "properties": {
                                "primary": true
                            }
                        }, 
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('intNicName'))]", 
                            "properties": {
                                "primary": false
                            }
                        }
                    ]
                }, 
                "osProfile": {
                    "adminPassword": "[variables('adminPasswordOrKey')]", 
                    "adminUsername": "[parameters('adminUsername')]", 
                    "computerName": "[variables('instanceName')]", 
                    "linuxConfiguration": "[if(equals(parameters('authenticationType'), 'password'), json('null'), variables('linuxConfiguration'))]"
                }, 
                "storageProfile": "[if(variables('useCustomImage'), variables('storageProfileArray').customImage, variables('storageProfileArray').platformImage)]"
            }, 
            "tags": "[if(empty(variables('tagValues')), json('null'), variables('tagValues'))]", 
            "type": "Microsoft.Compute/virtualMachines"
        }, 
        {
            "apiVersion": "[variables('computeApiVersion')]", 
            "dependsOn": [
                "[concat('Microsoft.Compute/virtualMachines/', variables('instanceName'))]"
            ], 
            "location": "[variables('location')]", 
            "name": "[concat(variables('instanceName'),'/start')]", 
            "properties": {
                "protectedSettings": {
                    "commandToExecute": "[concat('mkdir -p /var/log/cloud/azure; mkdir -p /config/cloud; echo ', variables('initScript'), ' | /usr/bin/base64 -d > /config/cloud/init.sh; chmod +x /config/cloud/init.sh;', ' /config/cloud/init.sh --cloud azure --log-level debug --data-interface eth1 --license ', parameters('bigIqLicenseKey1'), ' --ntp ', parameters('ntpServer'), ' --timezone ', parameters('timeZone'), ' --create-license-pool ', parameters('licensePoolKeys'), ' --create-reg-key-pool ', parameters('regPoolKeys'), ' --fcl-tag ', variables('f5CloudLibsTag'), ' --fcl-cloud-tag ', variables('f5CloudLibsAzureTag'), ' --vlan ', variables('singleQuote'), 'n:internal,nic:1.1', variables('singleQuote'), ' --self-ip ', variables('singleQuote'), 'n:internal_self,a:', variables('intSubnetPrivateAddress'), ',v:internal,i:eth1', variables('singleQuote'), ' --usage-analytics ', variables('singleQuote'), 'send:', parameters('allowUsageAnalytics'), ',r:', variables('location'), ',cI:', variables('subscriptionID'), ',dI:', variables('deploymentId'), ',cN:aws,lT:byol,bIV:6.0.0,tN:f5-existing-stack-byol-2nic-bigiq,tV:4.3.0', variables('singleQuote'), ' &>> /var/log/cloud/azure/install.log &')]"
                }, 
                "publisher": "Microsoft.Azure.Extensions", 
                "type": "CustomScript", 
                "typeHandlerVersion": "2.0"
            }, 
            "tags": "[if(empty(variables('tagValues')), json('null'), variables('tagValues'))]", 
            "type": "Microsoft.Compute/virtualMachines/extensions"
        }
    ], 
    "outputs": {
        "GUI-URL": {
            "type": "string", 
            "value": "[concat('https://', reference(variables('mgmtPublicIPAddressId')).dnsSettings.fqdn, ':', 443)]"
        }, 
        "SSH-URL": {
            "type": "string", 
            "value": "[concat(reference(variables('mgmtPublicIPAddressId')).dnsSettings.fqdn, ' ',22)]"
        }
    }
}